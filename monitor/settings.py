"""
Django settings for monitor project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import logging

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# use python-dotenv library to load env variables from .env file - requires import above
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', None)
if SECRET_KEY is None:
    logging.error(f"MISSING ENV VARIABLE(S):")
    logging.error(f"\tDJANGO_SECRET_KEY")
    logging.error("\t>> Setup missing variables in '.env' file located in project's root.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
# CORS_ORIGIN_ALLOW_ALL = True
# CORS_ORIGIN_WHITELIST = (
#        'http://127.0.0.1:8100',
# )


# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:8100"
]

# Application definition

INSTALLED_APPS = [
    'channels',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'traffic_monitor.apps.TrafficMonitorConfig',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'monitor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'monitor.wsgi.application'

# Channels-Redis Configuration
ASGI_APPLICATION = 'monitor.channel_routing.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_NAME', None),
        'USER': os.environ.get('DB_USER', None),
        'PASSWORD': os.environ.get('DB_PASSWORD', None),
        'HOST': os.environ.get('DB_HOST', None),
        'PORT': os.environ.get('DB_PORT', None),
    }
}

# Check that environment variables for database have been set
missing_keys = []
for v in DATABASES.get('default').keys():
    if DATABASES.get('default').get(v) is None:
        missing_keys.append(v)

if len(missing_keys) > 0:
    logging.error(f"MISSING ENV VARIABLE(S):")
    for m in missing_keys:
        logging.error(f"\tDB_{m}")
    logging.error("\t>> Setup missing variables in '.env' file located in project's root.")
    exit(1)

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {'verbose': {
        '()': 'monitor.settings.LogColorFormatter',
        'format': '{levelname:^6} {asctime} ({module:^25}): {message}',
        'datefmt': '%Y-%m-%d %H:%M:%S',
        'style': '{', },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{', },
    },

    'handlers': {'console': {'level': 'INFO',
                             'class': 'logging.StreamHandler',
                             'formatter': 'verbose'},
                 },

    'loggers': {'django': {'handlers': ['console'],
                           'level': 'INFO', },
                'view': {'handlers': ['console'],
                         'level': 'INFO', },
                'model': {'handlers': ['console'],
                          'level': 'INFO', },
                'monitor': {'handlers': ['console'],
                            'level': 'INFO', },
                'detector': {'handlers': ['console'],
                             'level': 'INFO', },
                'command': {'handlers': ['console'],
                            'level': 'INFO', },
                'channel': {'handlers': ['console'],
                            'level': 'INFO', },
                'api': {'handlers': ['console'],
                        'level': 'INFO', },
                'service': {'handlers': ['console'],
                            'level': 'INFO', },
                'monitor_service': {'handlers': ['console'],
                                    'level': 'INFO', },
                'monitor_service_manager': {'handlers': ['console'],
                                            'level': 'INFO', },
                'log_service': {'handlers': ['console'],
                                'level': 'INFO', },
                'monitor_factory': {'handlers': ['console'],
                                    'level': 'INFO', },
                'feed_factory': {'handlers': ['console'],
                                 'level': 'INFO', },
                'logging_service': {'handlers': ['console'],
                                    'level': 'INFO', },
                'notification_service': {'handlers': ['console'],
                                         'level': 'INFO', },
                'chart_service': {'handlers': ['console'],
                                  'level': 'INFO', },
                'videodetection_service': {'handlers': ['console'],
                                           'level': 'INFO', },
                'frontend_communication_service': {'handlers': ['console'],
                                                   'level': 'INFO', },
                'test': {'handlers': ['console'],
                         'level': 'INFO', },
                },
}


from django.core.management.color import color_style, Style


class LogColorFormatter(logging.Formatter):
    def __init__(self, *args, **kwargs):
        self.style: Style = color_style()
        super().__init__(*args, **kwargs)

    def format(self, record):
        msg = record.msg
        level_name = getattr(record, 'levelname', None)

        # NOTICE(red), SUCCESS(green), WARNING(yellow), ERROR(red)
        if level_name:
            if level_name == 'INFO':
                msg = self.style.SUCCESS(msg)
            elif level_name == 'ERROR':
                msg = self.style.ERROR(msg)
            else:
                msg = self.style.NOTICE(msg)

        if self.uses_server_time() and not hasattr(record, 'server_time'):
            record.server_time = self.formatTime(record, self.datefmt)

        record.msg = msg
        return super().format(record)

    def uses_server_time(self):
        return self._fmt.find('{server_time}') >= 0
