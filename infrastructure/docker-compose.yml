version: '3.1'

volumes:
  monitor_data:
    driver: local

# BACKUP AND RESTORE
# https://docs.docker.com/storage/volumes/
# To backup the db, run this from a directory called monitor_backup:
# NOTE: <monitor_db> in the example below is a postgres container with the data that should be backed up
# This will create a backup archive in the directory from which it was executed
# docker run --rm --volumes-from <monitor_db> -v $(pwd):/backup alpine tar cvf /backup/monitor_db_backup_20201019_0725.tar /var/lib/postgresql/data

# To restore:
# 1. create a container to mount a volume which will be restored into which is called '/var/lib/postgresql/data':
# docker run -v /var/lib/postgresql/data --name db_restore alpine sh
# 2. Restore the backup into the container's volume.
# This command will mount a volume mapped to the postgres data directory and then overwrite that
# directory with the extracted archive:
# docker run --rm --volumes-from <db_restore> -v $(pwd):/backup postgres bash -c "tar xvf /backup/monitor_db_backup_20201019_0725.tar"
# NOTE: if you want to restore to the active postgres service, you can skip step 1 of the restore process:
# and use the following:
# WARNING: this will overwrite the active data base in <monitor_db> s!!!!!
# docker run --rm --volumes-from <monitor_db> -v $(pwd):/backup postgres bash -c "tar xvf /backup/monitor_db_backup_20201019_0725.tar"

# Now, the unnamed volume from db_restore has the backup data restored.

services:
  db:
    image: postgres
    container_name: monitor_db
    restart: always
    environment:
      POSTGRES_DB: monitor_db
      POSTGRES_USER: monuser
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    volumes:
      - monitor_data:/var/lib/postgresql/data  # using this line with volumes(above) creates a docker-internal volume
#      - ~/monitor_data:/var/lib/postgresql/data  # stored postgres data locally

  zookeeper:
    image: zookeeper:3.4.9
    hostname: zookeeper
    restart: always
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ~/monitor/zookeeper/data:/data
      - ~/monitor/zookeeper/datalog:/datalog

  kafka:
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka
    restart: always
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      #      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ~/monitor/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  charting_service:
    build: ../services/charting_service
    restart: always
    environment:
      NUM_PROCS: 4
      BOKEH_PORT: 8100
      DATA_URL: host.docker.internal
      DATA_PORT: 8000
    ports:
      - 8100:8100

#  web:
#    build: .
#    command: python manage.py runserver 0.0.0.0:8000
#    volumes:
#      - .:/code
#    ports:
#      - "8000:8000"
#    depends_on:
#      - db